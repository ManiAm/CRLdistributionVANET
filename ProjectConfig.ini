[General]
network = ned.Network
# ned-path = ../../src/base;../../src/modules;../../examples;..
record-eventlog = false
print-undisposed = false
debug-on-errors = true

tkenv-default-config = BonnMotion
cmdenv-config-name = CommandLine
cmdenv-express-mode = true
cmdenv-performance-display = false

rng-class = cMersenneTwister   # rng algorithm
num-rngs = 5                   # define five random streams from rng0 to rng4

# define the seed for rng0 to rng4
seed-0-mt= ${532509, 75335, 23567, 687, 2910,   1, 2, 3, 4, 5,        1, 6, 11, 16, 21,   260, 265, 270, 275, 290,  ! repetition}     
seed-1-mt= ${435501, 96433, 33434, 100, 7549,   6, 7, 8, 9, 10,       2, 7, 12, 17, 22,   261, 266, 271, 276, 291,  ! repetition}
seed-2-mt= ${396172, 56673, 92410, 400, 1200,   11, 12, 13, 14, 15,   3, 8, 13, 18, 23,   262, 267, 272, 277, 292,  ! repetition}      
seed-3-mt= ${616183, 33434, 16433, 600, 3190,   16, 17, 18, 19, 20,   4, 9, 14, 19, 24,   263, 268, 273, 288, 293,  ! repetition}      
seed-4-mt= ${726194, 23567, 55335, 800, 2000,   21, 22, 23, 24, 25,   5, 10, 15, 20, 25,  264, 269, 274, 289, 294,  ! repetition}      

# set rng0 of each module to a different global rng to separate them from each other.
# note that global rng0 is for other modules.
Network.*.mobility.rng-0 = 1 
Network.CA[*].appl.rng-0 = 2 
Network.RSU[*].appl.rng-0 = 3 
Network.V[*].appl.rng-0 = 4 

# Network.**.coreDebug = true

##########################################################
#			WorldUtility parameters                      #
##########################################################

Network.world.useTorus = false
Network.world.use2D = true


##########################################################
#			         channel parameters                  #
##########################################################

Network.connectionManager.coreDebug = false
Network.connectionManager.carrierFrequency = 2.4e+9Hz
Network.connectionManager.pMax = 110.11mW  
Network.connectionManager.sat = -120dBm
Network.connectionManager.alpha = 4.0
Network.connectionManager.sendDirect = false
Network.connectionManager.drawMaxIntfDist = true


##########################################################
#			TraCIScenarioManager parameters              #
##########################################################

Network.traciManager.updateInterval = 1s
Network.traciManager.host = "localhost"
Network.traciManager.port = 9999
Network.traciManager.moduleType = "ned.NodeV"
Network.traciManager.moduleName = "V"
Network.traciManager.moduleDisplayString = ""    # we will set this according to each vehicle type in ApplV.cc
Network.traciManager.autoShutdown = true
Network.traciManager.margin = 25
Network.traciManager.launchConfig = xmldoc("sumo-launchd.xml")
Network.traciManager.debug = false


##########################################################
#                  ARP module config                     #
##########################################################

Network.CA[*].arp.coreDebug = false
Network.RSU[*].arp.coreDebug = false
Network.V[*].arp.coreDebug = false

##########################################################
#              Application layer config                  #
##########################################################

# ApplV             -->  RSU-only
# ApplV_C2C_Epidemic
# ApplV_MPB
# ApplV_ICE
# ApplV_ICEv2

# ApplV_Broadcast   -->  V2V communication: when a node recieves a broadcast beacon, it sends its pieces.
# ApplV_BBroadcast  -->  V2V communication: nodes send their pieces to each other.
# ApplV_C2C_Epidemic_Ideal  --> No actual usage of IEEE 802.11g frames
# ApplV_NewMPB

Network.applType = "ApplV_ICEv2"
Network.ErasureCode = true
Network.SumoMode = false

Network.CA[*].appl.InitialWait = 0 
Network.CA[*].appl.CRLsize = 1000
Network.CA[*].appl.EnableShuffle = true
Network.CA[*].appl.NoSegments = 20   # number of CRL pieces (only when ErasureCode = false).
Network.CA[*].appl.M = 20 # 20
Network.CA[*].appl.N = 30 # 30
Network.CA[*].appl.Pseudonym_lifeTime = 120s

# for "I2V_tho" or "V2V_tho" :
# frame size (bits) = 18624, bitrate (bps) = 2e+06 --> TxTime (s) = 0.009312
# ex. if tho=0.03s then only 3 CRLs can be sent.
# ex. if tho=0.1s then only 10 CRLs can be sent.
# note that, tho=0 means we don't have limitation and all CRL pieces will be broadcasted.

Network.RSU[*].appl.CRL_Interval = 100s
Network.RSU[*].appl.beacon_Interval = 1s
Network.RSU[*].appl.I2V_tho = 0.1s     
Network.RSU[*].appl.I2V_EnableMultiChannel = false  #### todo !!

Network.V[*].appl.speed = 22mps
Network.V[*].appl.beacon_Interval = 1s
Network.V[*].appl.V2V_tho = 0.1s    
Network.V[*].appl.V2V_Wait_Beacon = 0.03s    # (only for NewMPB) wait for other beacons to receive.
Network.V[*].appl.V2V_EnableMultiChannel = false
Network.V[*].appl.V2V_Wait_CRL = 0.1s    # if multi-channel is enabled, each node waits for V2V_wait_CRL to receive all CRLs.
Network.V[*].appl.MagicCarsRatio = 0   # 30    # in percent (only in non-Sumo mode).
Network.V[*].appl.MagicReqTime = intuniform(0,60)
Network.V[*].appl.CRLrecons = false     # disable real reconstruction of CRLs to reduce processing.
Network.V[*].appl.CompromisedEnable = true
Network.V[*].appl.CompromisedMsgSendTime = 0s


##########################################################
#                Network layer config                    #
##########################################################

Network.*.net.coreDebug = false
Network.*.net.stats = false
Network.*.net.headerLength = 32bit     # 4 Bytes


##########################################################
#               NIC config for all nodes                 #
##########################################################

# 01. general NIC parameters (for battery)
Network.*.nic.decodingCurrentDelta = 0mA 
Network.*.nic.onCurrent = 10mA
Network.*.nic.rxCurrent = 20mA
Network.*.nic.rxTxCurrent = 1mA
Network.*.nic.setupRxCurrent = 1mA
Network.*.nic.setupTxCurrent = 1mA
Network.*.nic.sleepCurrent = 0.4mA
Network.*.nic.txCurrent = 30mA
Network.*.nic.txRxCurrent = 1mA

# 02. NIC.physical sub-layer parameters (BasePhyLayer.ned and Nic80211.ned)
Network.*.nic.phy.coreDebug = false
Network.*.nic.phy.usePropagationDelay = true

Network.*.nic.phy.thermalNoise = -140dBm   #-110dBm  the more the less errors
Network.*.nic.phy.useThermalNoise = true

Network.*.nic.phy.analogueModels = xmldoc("PhyLayerConfig.xml")
Network.*.nic.phy.decider = xmldoc("PhyLayerConfig.xml")

Network.*.nic.phy.maxTXPower = 110.11mW

# 3. NIC.MAC sub-layer parameters
Network.*.nic.mac.coreDebug = false
Network.*.nic.mac.debug = false

Network.*.nic.mac.headerLength = 272 bit
Network.*.nic.mac.queueLength = 14

Network.*.nic.mac.rtsCtsThreshold = 2000   #400

Network.*.nic.mac.txPower = 110.11mW  # [mW]


##########################################################
#                config for Bonn Motion                  #
##########################################################
[Config BonnMotion]

Network.numCA = 1
Network.numRSU = 4
Network.numV = 10

Network.playgroundSizeX = 2200m
Network.playgroundSizeY = 600m
Network.playgroundSizeZ = 0m

# 01. mobility config for CA (fixed)
Network.CA[0].mobType = "ConstSpeedMobility"
Network.CA[0].mobility.speed = 0mps
Network.CA[0].mobility.x = 1100
Network.CA[0].mobility.y = 50
Network.CA[0].mobility.z = 0
Network.CA[*].mobility.debug = false
Network.CA[*].mobility.coreDebug = false

# 02. mobility config for RSUs (fixed)
Network.RSU[*].mobType = "ConstSpeedMobility"
Network.RSU[*].mobility.speed = 0mps
Network.RSU[0].mobility.x = 330
Network.RSU[1].mobility.x = 860
Network.RSU[2].mobility.x = 1360
Network.RSU[3].mobility.x = 1860
Network.RSU[*].mobility.y = 300
Network.RSU[*].mobility.z = 0
Network.RSU[*].mobility.debug = false
Network.RSU[*].mobility.coreDebug = false

# 03. mobility config for V
Network.V[*].mobType = "BonnMotionMobility"
Network.V[*].mobility.traceFile = "bonnmotion/scenario2.movements"
Network.V[*].mobility.updateInterval = 0.5s
Network.V[0].mobility.nodeId = 0
Network.V[1].mobility.nodeId = 1
Network.V[2].mobility.nodeId = 2
Network.V[3].mobility.nodeId = 3
Network.V[4].mobility.nodeId = 4
Network.V[5].mobility.nodeId = 5
Network.V[6].mobility.nodeId = 6
Network.V[7].mobility.nodeId = 7
Network.V[8].mobility.nodeId = 8
Network.V[9].mobility.nodeId = 9
Network.V[*].mobility.x = intuniform(0, 2200)
Network.V[*].mobility.y = intuniform(0, 500)
Network.V[*].mobility.z = 0
Network.V[*].mobility.debug = false
Network.V[*].mobility.coreDebug = false


##########################################################
#                   config for SUMO                      #
##########################################################
[Config Sumo]

# enabling the TraCI module
Network.SumoMode = true

Network.numCA = 1
Network.numRSU = 6
Network.numV = 0

#Network.playgroundSizeX = 4500m
#Network.playgroundSizeY = 1500m
Network.playgroundSizeX = 6000m
Network.playgroundSizeY = 6000m
Network.playgroundSizeZ = 0m

# 01. mobility config for CA (fixed)
Network.CA[0].mobType = "ConstSpeedMobility"
Network.CA[0].mobility.speed = 0mps
Network.CA[0].mobility.x = 1100
Network.CA[0].mobility.y = 50
Network.CA[0].mobility.z = 0
Network.CA[*].mobility.debug = false
Network.CA[*].mobility.coreDebug = false

# 02. mobility config for RSUs (fixed)
Network.RSU[*].mobType = "RSUmobility"  # we derived this from ConstSpeedMobility
Network.RSU[*].mobility.speed = 0mps
Network.RSU[*].mobility.updateInterval = 0.5s
# (we put all RSUs in one place and move them in the simulation)
Network.RSU[*].mobility.x = 20 
Network.RSU[*].mobility.y = 20
Network.RSU[*].mobility.z = 0
Network.RSU[*].mobility.debug = false
Network.RSU[*].mobility.coreDebug = false

# 03. mobility config for V
Network.V[*].mobType = "TraCIMobility"
Network.V[*].mobility.accidentCount = 0
Network.V[*].mobility.accidentStart = -1s
Network.V[*].mobility.accidentDuration = -1s
Network.V[*].mobility.accidentInterval = -1s
Network.V[*].mobility.x = 0
Network.V[*].mobility.y = 0
Network.V[*].mobility.z = 0
Network.V[*].mobility.debug = false


##########################################################
#               config for command line                  #
##########################################################
[Config BonnMotion_Cmdenv]
extends = BonnMotion

repeat = 20    # repeat each run 20 times

#seed-set=0    # all runs use the same seed
seed-set = ${repetition}

# Network.ErasureCode = ${ErasureCode= false, true}
# Network.V[*].appl.MagicCarsRatio = ${MagicCarsRatio= 0, 30}
# Network.V[*].appl.MagicReqTime = ${MagicReqTime=intuniform(0,60)}
# Network.applType = ${appType= "ApplV", "ApplV_C2C_Epidemic", "ApplV_MPB", "ApplV_ICEv2"}
# Network.CA[*].appl.EnableShuffle = ${EnableShuffle= false, true}


##########################################################
#            config for command line Sumo                #
##########################################################
[Config Sumo_Cmdenv]
extends = Sumo

**.scalar-recording = false   # disable scalar recording (sca files)
**.vector-recording = false   # disable coutvector (vec and vci files)

repeat = 20    # repeat each run 20 times

#seed-set=0    # all runs use the same seed
seed-set = ${repetition}

Network.ErasureCode = ${ErasureCode= false, true}
Network.V[*].appl.MagicCarsRatio = ${MagicCarsRatio= 0, 30}
Network.V[*].appl.MagicReqTime = ${MagicReqTime=intuniform(0,60)}
Network.applType = ${appType= "ApplV", "ApplV_C2C_Epidemic", "ApplV_MPB", "ApplV_ICE"}
Network.CA[*].appl.EnableShuffle = ${EnableShuffle= false, true}

